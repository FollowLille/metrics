/*
Package staticlint реализует инструмент для статического анализа Go-кода.

### Запуск инструмента

Чтобы запустить staticlint, выполните команду:

	go run ./cmd/staticlint ./...

Инструмент анализирует указанные файлы или пакеты и проверяет их с помощью набора анализаторов.

### Включённые анализаторы

1. **Стандартные анализаторы из пакета golang.org/x/tools/go/analysis/passes:**
  - `nilness`: проверяет избыточные или невозможные проверки на nil.
  - `shadow`: проверяет на затенение переменных, когда новая переменная перекрывает существующую в той же области видимости.
  - `structtag`: проверяет теги структур, чтобы они соответствовали принятым в Go соглашениям.

2. **Анализаторы из Staticcheck (staticcheck.io):**
  - `SA`: анализаторы класса SA проверяют на наличие серьёзных ошибок, таких как работа с nil, утечки памяти и гонки данных.
  - `ST`: анализаторы класса ST помогают выявить потенциальные проблемы с производительностью.

3. **Пользовательский анализатор:**
  - `noosexit`: пользовательский анализатор, который запрещает использование прямого вызова `os.Exit` в функции `main` пакета `main`. Это позволяет улучшить читаемость и тестируемость программы.

### Пример

Если в функции `main` пакета `main` присутствует вызов `os.Exit`, например:

	package main

	import "os"

	func main() {
		os.Exit(1)
	}

Инструмент выдаст предупреждение:

	./main.go:6:2: can't use os.Exit in main function
*/
package main
